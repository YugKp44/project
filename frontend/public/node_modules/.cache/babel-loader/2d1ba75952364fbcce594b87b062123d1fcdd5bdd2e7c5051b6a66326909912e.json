{"ast":null,"code":"var _jsxFileName = \"E:\\\\bolt-backend2\\\\project\\\\frontend\\\\src\\\\AnalyticsData.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2'; // Import Line chart component\nimport { Chart as ChartJS, Title, Tooltip, Legend, CategoryScale, LinearScale, PointElement, LineElement, Filler } from 'chart.js';\n\n// Register necessary Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(Title, Tooltip, Legend, CategoryScale, LinearScale, PointElement, LineElement, Filler);\nconst AnalyticsData = () => {\n  _s();\n  const [analytics, setAnalytics] = useState([]); // Initialize as empty array\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchAnalytics = async () => {\n      try {\n        console.log('Fetching analytics data...');\n        const response = await fetch('http://localhost:3000/api/analytics');\n        console.log('Backend Response:', response);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const result = await response.json();\n        console.log('Fetched Data:', result); // Log the entire response to check its structure\n\n        // Check if result.data is an array\n        if (result.success && Array.isArray(result.data)) {\n          setAnalytics(result.data); // Use result.data to set the state\n        } else {\n          throw new Error('Invalid data format');\n        }\n      } catch (err) {\n        console.error('Error while fetching data:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchAnalytics();\n  }, []);\n\n  // If still loading, show loading message\n  if (loading) {\n    console.log('Loading data...');\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 16\n    }, this);\n  }\n\n  // If there was an error, show error message\n  if (error) {\n    console.error('An error occurred:', error);\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Prepare data for the chart\n  const chartData = {\n    labels: analytics.map(item => item.date),\n    // X-axis: Dates\n    datasets: [{\n      label: 'Page Views',\n      // The name of the dataset\n      data: analytics.map(item => item.pageViews),\n      // Data for page views\n      fill: true,\n      borderColor: 'rgba(75, 192, 192, 1)',\n      // Line color\n      tension: 0.4 // Smoothing of the line\n    }, {\n      label: 'Users',\n      // The name of the dataset\n      data: analytics.map(item => item.activeUsers),\n      // Data for active users\n      fill: false,\n      borderColor: 'rgba(153, 102, 255, 1)',\n      // Line color\n      tension: 0.4\n    }]\n  };\n\n  // Chart options\n  const chartOptions = {\n    responsive: true,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Analytics Data Over Time' // Title for the chart\n      },\n      tooltip: {\n        callbacks: {\n          label: function (tooltipItem) {\n            return `${tooltipItem.dataset.label}: ${tooltipItem.raw}`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Date' // Label for X-axis\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Values' // Label for Y-axis\n        }\n      }\n    }\n  };\n\n  // Render the chart\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Analytics Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n};\n_s(AnalyticsData, \"v59rz4F/wjtc89TkauXcMYBTIv0=\");\n_c = AnalyticsData;\nexport default AnalyticsData;\nvar _c;\n$RefreshReg$(_c, \"AnalyticsData\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","Title","Tooltip","Legend","CategoryScale","LinearScale","PointElement","LineElement","Filler","jsxDEV","_jsxDEV","register","AnalyticsData","_s","analytics","setAnalytics","loading","setLoading","error","setError","fetchAnalytics","console","log","response","fetch","ok","Error","status","result","json","success","Array","isArray","data","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","chartData","labels","map","item","date","datasets","label","pageViews","fill","borderColor","tension","activeUsers","chartOptions","responsive","plugins","title","display","text","tooltip","callbacks","tooltipItem","dataset","raw","scales","x","y","options","_c","$RefreshReg$"],"sources":["E:/bolt-backend2/project/frontend/src/AnalyticsData.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2'; // Import Line chart component\r\nimport { Chart as ChartJS, Title, Tooltip, Legend, CategoryScale, LinearScale, PointElement, LineElement, Filler } from 'chart.js';\r\n\r\n// Register necessary Chart.js components\r\nChartJS.register(\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Filler\r\n);\r\n\r\nconst AnalyticsData = () => {\r\n    const [analytics, setAnalytics] = useState([]); // Initialize as empty array\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchAnalytics = async () => {\r\n            try {\r\n                console.log('Fetching analytics data...');\r\n                \r\n                const response = await fetch('http://localhost:3000/api/analytics');\r\n                console.log('Backend Response:', response);\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n\r\n                const result = await response.json();\r\n                console.log('Fetched Data:', result); // Log the entire response to check its structure\r\n                \r\n                // Check if result.data is an array\r\n                if (result.success && Array.isArray(result.data)) {\r\n                    setAnalytics(result.data); // Use result.data to set the state\r\n                } else {\r\n                    throw new Error('Invalid data format');\r\n                }\r\n            } catch (err) {\r\n                console.error('Error while fetching data:', err);\r\n                setError(err.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchAnalytics();\r\n    }, []);\r\n\r\n    // If still loading, show loading message\r\n    if (loading) {\r\n        console.log('Loading data...');\r\n        return <p>Loading...</p>;\r\n    }\r\n\r\n    // If there was an error, show error message\r\n    if (error) {\r\n        console.error('An error occurred:', error);\r\n        return <p>Error: {error}</p>;\r\n    }\r\n\r\n    // Prepare data for the chart\r\n    const chartData = {\r\n        labels: analytics.map(item => item.date), // X-axis: Dates\r\n        datasets: [\r\n            {\r\n                label: 'Page Views', // The name of the dataset\r\n                data: analytics.map(item => item.pageViews), // Data for page views\r\n                fill: true,\r\n                borderColor: 'rgba(75, 192, 192, 1)', // Line color\r\n                tension: 0.4, // Smoothing of the line\r\n            },\r\n            {\r\n                label: 'Users', // The name of the dataset\r\n                data: analytics.map(item => item.activeUsers), // Data for active users\r\n                fill: false,\r\n                borderColor: 'rgba(153, 102, 255, 1)', // Line color\r\n                tension: 0.4,\r\n            },\r\n        ],\r\n    };\r\n\r\n    // Chart options\r\n    const chartOptions = {\r\n        responsive: true,\r\n        plugins: {\r\n            title: {\r\n                display: true,\r\n                text: 'Analytics Data Over Time', // Title for the chart\r\n            },\r\n            tooltip: {\r\n                callbacks: {\r\n                    label: function (tooltipItem) {\r\n                        return `${tooltipItem.dataset.label}: ${tooltipItem.raw}`;\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        scales: {\r\n            x: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Date', // Label for X-axis\r\n                },\r\n            },\r\n            y: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Values', // Label for Y-axis\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    // Render the chart\r\n    return (\r\n        <div>\r\n            <h1>Analytics Data</h1>\r\n            <Line data={chartData} options={chartOptions} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnalyticsData;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}